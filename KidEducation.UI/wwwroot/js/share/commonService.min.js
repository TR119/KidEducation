var commonService = {
    init: function () {
    },
    getSeoTitle: function (input) {
        if (input === undefined || input === '')
            return '';
        var slug = input.toLowerCase();
        slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
        slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
        slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
        slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
        slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
        slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
        slug = slug.replace(/đ/gi, 'd');
        slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
        slug = slug.replace(/ /gi, "-");
        slug = slug.replace(/\-\-\-\-\-/gi, '-');
        slug = slug.replace(/\-\-\-\-/gi, '-');
        slug = slug.replace(/\-\-\-/gi, '-');
        slug = slug.replace(/\-\-/gi, '-');
        slug = '@' + slug + '@';
        slug = slug.replace(/\@\-|\-\@|\@/gi, '');

        return slug;
    },
    datePickerBinding: function () {
        $('.datepicker').datepicker({
            language: "vi",
            autoclose: true,
            todayHighlight: true
        });
    },
    setSessionStorage: function (name, datas) {
        sessionStorage.setItem(name, JSON.stringify(datas));
    },
    getSessionStorage: function (name) {
        return JSON.parse(sessionStorage.getItem(name));
    },

    setLocalStorage: function (name, datas) {
        localStorage.setItem(name, JSON.stringify(datas));
    },
    getLocalStorage: function (name) {
        return JSON.parse(localStorage.getItem(name));
    },
    setRedirectPage: function (url) {
        window.location = url;
    },
    loadingOn: function () {
        $('.loadingapp').removeClass('hidden');
    },
    loadingOff: function () {
        $('.loadingapp').addClass('hidden');
    },
    uuidv4: function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    },
    getUrlParameterByName: function (name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    },
    isNullObject: function (obj) {
        if (obj === null || angular.equals(obj, {} || obj === "undefined"))
        {
            return true;
        } else {
            return false;
        }
    },
    fileToArrayBuffer: function (file) {
        return new Promise((resolve, reject) => {
            var fr = new FileReader();
            fr.onload = function (e) {
                var data = new Uint8Array(this.result);
                resolve(data);
            };
            fr.readAsArrayBuffer(file);
        });
    },
    isFileType(file, fileType) {
        if (!file || !fileType) return false;
        return file.type.indexOf(fileType) > -1;
    },
    fileToBase64: function (idElement) {

        var deferred = $.Deferred();
        var arrFile = [];
        var files = $(idElement)[0].files;
        if (files.length === 0) deferred.resolve(arrFile);
        for (var i = 0; i < files.length; i++) {
            if (files && files[i]) {
                var fileInfo = {
                    base64: '',
                    name: files[i].name,
                    size: files[i].size
                };
                var fr = new FileReader();
                fr.onload = function (e) {
                    fileInfo.base64 = e.target.result;
                    arrFile.push(fileInfo);
                };
                fr.readAsDataURL(files[i]);
            }
        }
        deferred.resolve(arrFile);


        return deferred.promise();
    },
    objFileToBase64: function (fileInput) {

        var deferred = $.Deferred();
        var arrFile = []; 

        for (var i = 0; i < fileInput.length; i++) {
            if (fileInput && fileInput[i]) {
                var fileInfo = {
                    base64: '',
                    name: fileInput[i].name,
                    size: fileInput[i].size
                };
                var fr = new FileReader();
                fr.onload = function (e) {
                    fileInfo.base64 = e.target.result;
                    arrFile.push(fileInfo);
                };
                fr.readAsDataURL(fileInput);
            }
        }
        deferred.resolve(arrFile);
        return deferred.promise();
    },
    getNumberOnly: function (numbers) {
        if (numbers.length === 0) return;
        var resul = numbers.toString().replace(/[^0-9]+/g, '');
        var i = 0;
        for (var j = 0; j < resul.length; j++) {
            if (resul[j] === '0') {
                i = j + 1;
            } else {
                j = resul.length + 1;
            }
        }
        return i === resul.length ? '0' : resul.substr(i);
    },
    formatNumber: function (str, numberAfter) {
        numberAfter = numberAfter === undefined ? 4 : numberAfter;
        var x = str.toString();
        var parts = x.toString().split(".");
        parts[0] = getNumberOnly(parts[0]);
        parts[0] = parts[0].replace(/[^0-9]+/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        if (parts.length >= 2) {
            parts[1] = parts[1].length > numberAfter ? parts[1].substr(0, numberAfter) : parts[1];
        }
        return parts.length >= 2 ? parts[0] + '.' + parts[1] : parts[0];
    },
    numberFormat: function (number, char) {
        if (!char) char = ".";
        const parts = number.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, char);
        return parts.join(".");
    },
    getNumberFloat: function (str) {
        if (str === undefined || str === null || str.toString().trim().length === 0) {
            return 0;
        }
        var x = str.toString();
        var parts = x.toString().split(".");
        parts[0] = getNumberOnly(parts[0]);
        if (parts.length >= 2) parts[1] = getNumberOnly(parts[1]);
        var strNum = parts.length >= 2 ? parts[0] + '.' + parts[1] : parts[0];
        return parseFloat(strNum);
    },
    getNumberIntOnly: function (str) {
        if (str === undefined || str === null || str.toString().trim().length === 0) {
            return 0;
        }
        var x = str.toString().replace(/[^0-9]+/g, '');;
        return parseFloat(x);
    },
    bytesToSize: function (bytes) {
        var exp = Math.log(bytes) / Math.log(1024) | 0;
        var result = (bytes / Math.pow(1024, exp)).toFixed(2);
        return result + ' ' + (exp == 0 ? 'bytes' : 'KMGTPEZY'[exp - 1] + 'B');
    },

    goBack: function () {
        window.history.back();
    },
    paginationArr: function (arr, page, pageSize) {
        var start = (page - 1) * pageSize;
        var end = (page - 1) * pageSize + pageSize;
        end = end > arr.length ? arr.length : end;
        var result = {
            ListKetQuaPH: {
                Data: [],
                Total: arr.length
            }

        };
        for (var i = start; i < end; i++) {
            result.ListKetQuaPH.Data.push(arr[i]);
        }
        return result;
    },
    getFullDateTime: function (dateParams) {
        var dateParam = new Date(dateParams);
        return new Date(dateParam.getFullYear(), dateParam.getMonth(), dateParam.getDate(), dateParam.getHours(), dateParam.getMinutes(), dateParam.getSeconds());
    },
    getDiffDate: function (fromDate, toDate) {
        var time2 = new Date(toDate).getTime();
        var time1 = new Date(fromDate).getTime();
        var oneDay = 1000 * 60 * 60 * 24;
        var diff = time2 - time1;
        return Math.ceil(diff / oneDay);
    },
    formatDatetime: function (date) {
        if (date == undefined || date == null) {
            return '';
        }
        var today = new Date(date);
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); 
        var yyyy = today.getFullYear();

        return dd + '/' + mm + '/' + yyyy;
    },
    toggleArrayItem: function (a, v) {
        const i = a.indexOf(v);
        if (i === -1)
            a.push(v);
        else
            a.splice(i, 1);
    },
    downloadFormBase64: function (base64, fileName) {
        $('#btnDownLoaddownloadFormBase64').remove();
        $('body').append('<a href="#" download="Download.xls" id="btnDownLoaddownloadFormBase64" class="hidden">Downloads</a>');
        $('#btnDownLoaddownloadFormBase64').prop("download", fileName);
        var dlink = document.getElementById('btnDownLoaddownloadFormBase64');
        dlink.href = base64;
        dlink.click();
        $('#btnDownLoaddownloadFormBase64').remove();

    },
    downloadFormBinary: function (binary, fileName) {
        var dl = document.createElement("a");
        const contentType = 'application/octet-stream';
        var url = this.blobUrlFromBinary(binary, contentType);
        dl.href = url;
        dl.download = fileName;
        dl.className = "hidden";
        document.body.appendChild(dl);
        dl.click();

    },
    fillObjectToSelectOption: function (id, valueProp, textProp, obj) {
        for (var i = 0; i < obj.length; i++) {
            if (valueProp == null || textProp == null) {
                $(id).append(` <option value="${obj[i]}">${obj[i]}</option>`);
            } else {
                $(id).append(` <option value="${obj[i][valueProp]}">${obj[i][textProp]}</option>`);

            }
        }
    },
    getDateTimeForInputTypeDate: function (date) {
        var today = new Date(date);
        var dd = today.getDate();
        var mm = today.getMonth() + 1; 
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        return yyyy + '-' + mm + '-' + dd;

    },
    listenChangesinArray: function (arr, callback) {
        ['pop', 'push', 'reverse', 'shift', 'unshift', 'splice', 'sort'].forEach((m) => {
            arr[m] = function () {
                var res = Array.prototype[m].apply(arr, arguments); 
                callback.apply(arr, arguments);
                return res;
            }
        });
    },
    blobUrlFromBinary: function (bytes, contentType) {
        var blob = new Blob([bytes], {
            type: contentType
        });
        return URL.createObjectURL(blob);
    },
    flattenArray: function (arr) {
        return arr.reduce(function (flat, toFlatten) {
            return flat.concat(Array.isArray(toFlatten) ? commonService.flattenArray(toFlatten) : toFlatten);
        }, []);
    }
};
commonService.init();
