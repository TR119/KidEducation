var shareService = {
    apiPassWordUpdate: "/QuanLyNguoiDung/PassWordUpdate",
    modalPassChangeId: '#md-passchange',
    passChangeModel: function () {
        $("#md-passchange form").trigger("reset");
        const form = $("#md-passchange form");
        form.find("#OldPassword").val('');
        form.find("#NewPassword").val('');
        form.find("#NewPasswordConfirm").val('');
        $("#md-passchange").modal({
            backdrop: 'static',
            keyboard: false
        });
        $("#md-passchange").modal("show");
    },
    passChangeModelUpdate: function () {
        var objPass = {
            oldPass: $(shareService.modalPassChangeId + " form #OldPassword").val(),
            newPass: $(shareService.modalPassChangeId + " form #NewPassword").val(),
            newPassConfirm: $(shareService.modalPassChangeId + " form #NewPasswordConfirm").val(),
            __RequestVerificationToken: $("input[name=__RequestVerificationToken]").val()
        };
        if (objPass.oldPass.length == 0) {
            notificationService.error('Mật khẩu cũ không được để trống');
            $(shareService.modalPassChangeId + " form #OldPassword").focus();
            return;
        }
        else {
            if (objPass.oldPass.trim().length > 50) {
                notificationService.error('Mật khẩu cũ không được vượt quá 50 ký tự');
                $(shareService.modalPassChangeId + " form #OldPassword").focus();
                return;
            }
        }
        if (objPass.newPass.length == 0) {
            notificationService.error('Mật khẩu mới không được để trống');
            $(shareService.modalPassChangeId + " form #NewPassword").focus();
            return;
        }
        else {
            if (objPass.newPass.trim().length < 8) {
                notificationService.error('Mật khẩu mới tối thiểu 8 ký tự');
                $(shareService.modalPassChangeId + " form #NewPassword").focus();
                return;
            }
            if (objPass.newPass.trim().length > 50) {
                notificationService.error('Mật khẩu mới không được vượt quá 50 ký tự');
                $(shareService.modalPassChangeId + " form #NewPassword").focus();
                return;
            }
            var passRegular = "^((?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[^a-zA-Z0-9])|(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[^a-zA-Z0-9])|(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^a-zA-Z0-9])).{8,}$";
            if (!objPass.newPass.trim().match(passRegular)) {
                notificationService.error('Mật khẩu phải có ít nhất 8 ký tự, và chứa ít nhất một chữ cái, một số và ký tự đặc biệt (ví dụ: @ # $% ^ & *)');
                return;

            }
        }

        if (objPass.newPass != objPass.newPassConfirm) {
            notificationService.warning("Mật khẩu mới và Nhắc lại mật khẩu không trùng khớp");
            $(shareService.modalPassChangeId + " form #NewPassword").focus();
            return;
        }
        if (objPass.newPass == objPass.oldPass) {
            notificationService.warning("Mật khẩu mới và mật khẩu cũ không được trùng nhau");
            $('#newPass').focus();
            return;
        }

        callApiService.post(shareService.apiPassWordUpdate, objPass).then(
            function (data) {
                if (data == true) {
                    $("#md-passchange").modal("hide");
                    notificationService.success("Đổi mật khẩu thành công, vui lòng đăng nhập lại để tiếp tục sử dụng chương trình");
                    commonService.loadingOn();
                    setTimeout(function () {
                        document.getElementById('logoutForm').submit();
                    }, 1000);
                } else {
                    notificationService.error(data.Msg);
                }
            });

    },
    showPasswordOnForm: function () {
        if ($("#md-passchange form #NewPassword").attr("type") == "text") {
            $("#md-passchange form #NewPassword").attr('type', 'password');
            $("#md-passchange form #NewPasswordConfirm").attr('type', 'password');
        } else if ($("#md-passchange form #NewPassword").attr("type") == "password") {
            $("#md-passchange form #NewPassword").attr('type', 'text');
            $("#md-passchange form #NewPasswordConfirm").attr('type', 'text');
        }
    },
    createRandomPass: function () {
        var ramdom = shareService.generatePassword();
        $("#md-passchange form #NewPassword").val(ramdom);
        $("#md-passchange form #NewPasswordConfirm").val(ramdom);
    },
    generatePassword: function (len) {
        var length = (len) ? (len) : (8);
        var string = "abcdefghijknopqrstuvwxyzACDEFGHJKLMNPQRSTUVWXYZ";
        var numeric = '123456789';
        var punctuation = '!@#$%^&*()_+~`|}{[]\:;?><,./-=';
        var password = "";
        var character = "";
        var crunch = true;
        while (password.length < length) {
            entity1 = Math.ceil(string.length * Math.random() * Math.random());
            entity2 = Math.ceil(numeric.length * Math.random() * Math.random());
            entity3 = Math.ceil(punctuation.length * Math.random() * Math.random());
            hold = string.charAt(entity1);
            hold = (password.length % 2 == 0) ? (hold.toUpperCase()) : (hold);
            character += hold;
            character += numeric.charAt(entity2);
            character += punctuation.charAt(entity3);
            password = character;
        }
        password = password.split('').sort(function () { return 0.5 - Math.random() }).join('');
        return password.substr(0, len);
    },    
    
};
var jqueryDataTableService = {
    getTableConfig: function (tableName) {
        return callApiService.get("/admin/TableConfig/GetForDataTable?tableName=" + tableName);
    },
    getColByConfig: function (config) {
        return {
            data: config.ColumnName,
            title: config.ColumnDescription,
            sortable: config.IsSort,
            width: config.ColumnWidth,
            className: config.ColumnAlign? "text-center" :"",
            render: function (data, type, row, meta) {
                switch (config.ColumnDataType) {
                    case 1:
                        return data;
                    case 2:
                        return `<div class="text-center">${data || 0}</div>`;
                    case 3:
                        return `<div class="text-center">${data}</div>`;
                    case 4:
                        return data;
                    case 5:
                        return `<div class="text-center">${data || 0}</div>`;
                    case 6: 
                        return data ? '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-success\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><polyline points=\"9 11 12 14 20 6\" /><path d=\"M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9\" /></svg>' : '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-muted\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><polyline points=\"9 11 12 14 20 6\" /><path d=\"M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9\" /></svg>';
                    case 7:
                        return `<input data-row="${meta.row}" data-col="${meta.col}" type="checkbox" ${data ? "checked" : ""} class="minimal select-value" value="${data}">`;
                    case 8:
                        return data ? '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-info\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><circle cx=\"10\" cy=\"14\" r=\"5\" /><line x1=\"19\" y1=\"5\" x2=\"13.6\" y2=\"10.4\" /><line x1=\"19\" y1=\"5\" x2=\"14\" y2=\"5\" /><line x1=\"19\" y1=\"5\" x2=\"19\" y2=\"10\" /></svg>' : '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-purple\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><circle cx=\"12\" cy=\"9\" r=\"5\" /><line x1=\"12\" y1=\"14\" x2=\"12\" y2=\"21\" /><line x1=\"9\" y1=\"18\" x2=\"15\" y2=\"18\" /></svg>';
                    case 9:
                        return data ? '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-red\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><circle cx=\"12\" cy=\"12\" r=\"9\"/><line x1=\"7\" y1=\"8.5\" x2=\"10\" y2=\"11.5\"/><path d=\"M7 11.5l3 -3\"/><line x1=\"14\" y1=\"8.5\" x2=\"17\" y2=\"11.5\"/><path d=\"M14 11.5l3 -3\"/><path d=\"M9.5 15a3.5 3.5 0 0 0 5 0\"/></svg>' : '';
                    default:
                        return data;
                }
            }
        };
    },
    createDataTable: function (
        id,
        listColConfig,
        ajaxObj,
        primaryKey,
        delFunc = null,
        editFunc = null,
        order = [[0, "asc"]],
        scrollX = false,
        autoWidth = true,
        isCheck = true,
        isThaoTac = true,
        checkboxHandler = null,
        responsive = false,
        viewFunc = null,
        pheDuyetFunc = null,
        khoiPhucFunc = null
    ) {
        ajaxObj = jqueryDataTableService.addOtherToAjacObjDataTable(ajaxObj);
        const listColumn = this.getListColForDataTable(listColConfig, primaryKey, delFunc, editFunc, viewFunc,  pheDuyetFunc, khoiPhucFunc, isCheck, isThaoTac);
        return $(id).DataTable({
            serverSide: true,
            ajax: ajaxObj,
            rowId: primaryKey,
            columns: listColumn,
            order: order,
            responsive: responsive,
            dom:
                "<'row'<'col-12 table-body't>>" +
                "<'card-footer d-flex align-items-center'<'m-0 text-muted'l><'pagination m-0 ms-auto'p>>",
            "pagingType": "full_numbers",
            "language": {
                emptyTable: "Không có dữ liệu",
                "paginate": {
                    "first": "«",
                    "previous": "‹",
                    "next": "›",
                    "last": "»"
                },
                "lengthMenu": "Hiển thị _MENU_ dòng"
            },
            "paging": true,
            "lengthChange": true,
            "searching": false,
            "ordering": true,
            "info": false,
            "lengthMenu": [10, 30, 50, 100],
            "autoWidth": autoWidth,
            "scrollX": scrollX,
            initComplete: function () {
                $("input#checkbox-all").on("change", function () {
                    var checked = $(this).is(":checked");
                    $("input.select-row").prop("checked", checked);
                });
            },
            drawCallback: function () {
            },
        });
    },
    getListColForDataTable: function (listCol, primaryKey, delFunc, editFunc, viewFunc, pheDuyetFunc, khoiPhucFunc, isCheck = true, isThaoTac = true) {
        var listColDataTable = [
            {
                data: primaryKey,
                className: "text-center",
                title: "#",
                width: "50px",
                sortable: false,
                render: function (data, type, row, meta) {
                    return meta.row + meta.settings._iDisplayStart + 1;
                }
            }
        ];
        if (isCheck) {
            listColDataTable.push({
                data: primaryKey,
                title: '<input type="checkbox" class="form-check-input m-0 align-middle" id="checkbox-all" />',
                sortable: false,
                width: "30px",
                className: "text-center",
                render: function (data, type, row, meta) {
                    return `<input type="checkbox" class="form-check-input m-0 align-middle select-row" id="checkbox-${data}" data-id="${data}" />`;
                }
            });
        }
        if (isThaoTac) {
            const colWidth = (delFunc ? 39 : 0) + (editFunc ? 39 : 0) + (viewFunc ? 39 : 0) + (pheDuyetFunc ? 39 : 0) + (khoiPhucFunc ? 39 : 0);
            listColDataTable.push({
                data: primaryKey,
                className: "text-center",
                title: "Chức năng",
                width: `${colWidth}px`,
                sortable: false,
                render: function (data, type, row, meta) {
                    let action = '<div class="action-button-group">';
                    if (viewFunc) {
                        action += `&nbsp;<button type="button" class="btn btn-outline-primary btn-icon action"  onclick="${viewFunc}(${meta.row
                            });" data-toggle="tooltip" data-placement="left" title="Xem"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" /><circle cx=\"12\" cy=\"12\" r=\"2\" /><path d=\"M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7\" /></svg></button>`;
                    }
                    if (editFunc) {
                        action += `&nbsp;<button type="button" class="btn btn-outline-primary btn-icon action"  onclick="${editFunc}('${meta.row
                            }');" data-toggle="tooltip" data-placement="left" title="Sửa"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3\" /><path d=\"M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3\" /><line x1=\"16\" y1=\"5\" x2=\"19\" y2=\"8\" /></svg></button>`;
                    }
                    if (pheDuyetFunc) {
                        action += `&nbsp;<button type="button" class="btn btn-outline-green btn-icon action"  onclick="${pheDuyetFunc}('${meta.row
                            }');" data-toggle="tooltip" data-placement="left" title="Phê duyệt"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><polyline points=\"9 11 12 14 20 6\" /><path d=\"M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9\" /></svg></button>`;
                    }
                    if (khoiPhucFunc) {
                        action += `&nbsp;<button type="button" class="btn btn-outline-green btn-icon action"  onclick="${khoiPhucFunc}('${meta.row
                            }');" data-toggle="tooltip" data-placement="left" title="Đổi mật khẩu"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><circle cx=\"6\" cy=\"6\" r=\"2\" /><circle cx=\"18\" cy=\"18\" r=\"2\" /><path d=\"M11 6h5a2 2 0 0 1 2 2v8\" /><polyline points=\"14 9 11 6 14 3\" /><path d=\"M13 18h-5a2 2 0 0 1 -2 -2v-8\" /><polyline points=\"10 15 13 18 10 21\" /></svg></button>`;
                    }
                    if (delFunc) {
                        action += `&nbsp;<button type="button" class="btn btn-outline-danger btn-icon action"  onclick="${delFunc}(${meta.row
                            });" data-toggle="tooltip" data-placement="left" title="Xóa"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" /><line x1=\"4\" y1=\"7\" x2=\"20\" y2=\"7\" /><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" /><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" /><path d=\"M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12\" /><path d=\"M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3\" /></svg></button>`;
                    }
                    action += "</div>";
                    return action;
                }
            });
        }
        for (var i = 0; i < listCol.length; i++) {
            var col = listCol[i];
            listColDataTable.push(this.getColByConfig(col));
        }
        return listColDataTable;
    },
    addOtherToAjacObjDataTable: function (ajaxObj) {
        ajaxObj.beforeSend = function () {
            commonService.loadingOn();
        };
        ajaxObj.complete = function () {
            commonService.loadingOff();
        };
        return ajaxObj;
    },
    getListIdChecked: function (tableHtmlId) {
        var listId = [];
        var listChecked = $("#" + tableHtmlId + " .select-row:checked");
        for (var i = 0; i < listChecked.length; i++) {
            var id = $(listChecked[i]).data("id");
            listId.push(id);
        }
        return listId;
    }
};
var postFormServices = function (form) {
    const formData = $(form).serialize();
    const action = $(form).prop("action");
    return callApiService.post(action, formData);
};
$.fn.LoadForm = function (data) {
    const props = Object.keys(data);
    $.each(props,
        (i, e) => {
            $(this).find(`#${e}`).val(data[e]);
        });
    return $(this);
}